// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/silastgoes/mock-store/src/model/product"
)

// MockProductModelService is a mock of ProductModelService interface.
type MockProductModelService struct {
	ctrl     *gomock.Controller
	recorder *MockProductModelServiceMockRecorder
}

// MockProductModelServiceMockRecorder is the mock recorder for MockProductModelService.
type MockProductModelServiceMockRecorder struct {
	mock *MockProductModelService
}

// NewMockProductModelService creates a new mock instance.
func NewMockProductModelService(ctrl *gomock.Controller) *MockProductModelService {
	mock := &MockProductModelService{ctrl: ctrl}
	mock.recorder = &MockProductModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductModelService) EXPECT() *MockProductModelServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductModelService) Create(name, description string, value float64, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, description, value, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductModelServiceMockRecorder) Create(name, description, value, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductModelService)(nil).Create), name, description, value, quantity)
}

// Delete mocks base method.
func (m *MockProductModelService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductModelServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductModelService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockProductModelService) Get(param string) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", param)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductModelServiceMockRecorder) Get(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductModelService)(nil).Get), param)
}

// GetProducts mocks base method.
func (m *MockProductModelService) GetProducts() ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductModelServiceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductModelService)(nil).GetProducts))
}

// Update mocks base method.
func (m *MockProductModelService) Update(id int, name, description string, value float64, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, description, value, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductModelServiceMockRecorder) Update(id, name, description, value, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductModelService)(nil).Update), id, name, description, value, quantity)
}
