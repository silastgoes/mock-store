// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductControlService is a mock of ProductControlService interface.
type MockProductControlService struct {
	ctrl     *gomock.Controller
	recorder *MockProductControlServiceMockRecorder
}

// MockProductControlServiceMockRecorder is the mock recorder for MockProductControlService.
type MockProductControlServiceMockRecorder struct {
	mock *MockProductControlService
}

// NewMockProductControlService creates a new mock instance.
func NewMockProductControlService(ctrl *gomock.Controller) *MockProductControlService {
	mock := &MockProductControlService{ctrl: ctrl}
	mock.recorder = &MockProductControlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductControlService) EXPECT() *MockProductControlServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProductControlService) Delete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", w, r)
}

// Delete indicates an expected call of Delete.
func (mr *MockProductControlServiceMockRecorder) Delete(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductControlService)(nil).Delete), w, r)
}

// Edit mocks base method.
func (m *MockProductControlService) Edit(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Edit", w, r)
}

// Edit indicates an expected call of Edit.
func (mr *MockProductControlServiceMockRecorder) Edit(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockProductControlService)(nil).Edit), w, r)
}

// Index mocks base method.
func (m *MockProductControlService) Index(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Index", w, r)
}

// Index indicates an expected call of Index.
func (mr *MockProductControlServiceMockRecorder) Index(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockProductControlService)(nil).Index), w, r)
}

// Insert mocks base method.
func (m *MockProductControlService) Insert(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", w, r)
}

// Insert indicates an expected call of Insert.
func (mr *MockProductControlServiceMockRecorder) Insert(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductControlService)(nil).Insert), w, r)
}

// New mocks base method.
func (m *MockProductControlService) New(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "New", w, r)
}

// New indicates an expected call of New.
func (mr *MockProductControlServiceMockRecorder) New(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockProductControlService)(nil).New), w, r)
}

// Update mocks base method.
func (m *MockProductControlService) Update(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", w, r)
}

// Update indicates an expected call of Update.
func (mr *MockProductControlServiceMockRecorder) Update(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductControlService)(nil).Update), w, r)
}
